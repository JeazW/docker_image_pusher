name: Docker-Pull-and-Push-Trigger

on:
  workflow_dispatch:
    inputs:
      images:
        description: 'Comma-separated list of Docker images (e.g., "nginx:latest,redis:alpine")'
        required: true
        type: string
      task_id:
        description: 'Task ID from Flask application'
        required: true
        type: string
      execution_id:
        description: 'Execution ID for tracking'
        required: true
        type: string

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"
  TASK_ID: "${{ github.event.inputs.task_id }}"
  EXECUTION_ID: "${{ github.event.inputs.execution_id }}"

jobs:
  build:
    name: Pull-and-Push-Images
    runs-on: ubuntu-latest
    steps:
      # 1. 磁盘空间检查
      - name: Check-disk-space-before-cleanup
        run: |
          echo "Before freeing up disk space"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      # 2. 清理磁盘空间
      - name: Maximize-build-space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: 'true'
          remove-haskell: 'true'
          build-mount-path: '/var/lib/docker/'

      - name: Restart-Docker
        run: sudo service docker restart

      - name: Check-disk-space-after-cleanup
        run: |
          echo "Free up disk space complete"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="

      # 3. 检出代码
      - name: Checkout-Code
        uses: actions/checkout@v4

      # 4. 处理传入的镜像列表
      - name: Process-Images
        run: |
          echo "Received images: ${{ github.event.inputs.images }}"
          echo "Task ID: ${{ github.event.inputs.task_id }}"
          echo "Execution ID: ${{ github.event.inputs.execution_id }}"
          # 将逗号分隔的镜像列表写入 images.txt
          echo "${{ github.event.inputs.images }}" | sed 's/,/\n/g' > images.txt
          echo "Images to process:"
          cat images.txt

      # 6. 拉取、重命名并推送镜像
      - name: Pull-Tag-and-Push-Images
        id: process_images
        run: |
          # 初始化结果数组
          declare -a results_array=()
          
          # 处理每个镜像
          while IFS= read -r image || [ -n "$image" ]; do
            # 忽略空行
            [[ -z "$image" ]] && continue

            echo "Processing image: $image"
            
            # 提取平台参数（如果有）
            platform=""
            if [[ "$image" =~ ^--platform= ]]; then
              platform=$(echo "$image" | awk '{print $1}' | sed 's/--platform=//')
              image=$(echo "$image" | sed 's/^--platform=[^ ]* //')
            fi

            # 记录原始镜像名称
            original_image="$image"
            clean_image="${image%%@*}"  # 移除@sha256等部分
            image_name_tag=$(echo "$clean_image" | awk -F'/' '{print $NF}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            image_tag=$(echo "$image_name_tag" | awk -F':' '{print $2}')

            # 初始化结果对象
            result="{
              \"image\": \"$original_image\",
              \"status\": \"unknown\",
              \"image_name\": \"$image_name\",
              \"tag\": \"$image_tag\",
              \"platform\": \"$platform\"
            }"

            # 拉取镜像
            pull_command="docker pull"
            if [ -n "$platform" ]; then
              pull_command="$pull_command --platform $platform"
            fi
            pull_command="$pull_command $image"

            # 创建临时文件存储错误日志
            error_log_file=$(mktemp)

            if ! $pull_command 2> "$error_log_file"; then
              error_message=$(cat "$error_log_file" | tr -d '\n' | sed 's/"/\\"/g')
              result="{
                \"image\": \"$original_image\",
                \"status\": \"failed\",
                \"image_name\": \"$image_name\",
                \"tag\": \"$image_tag\",
                \"error\": \"$error_message\",
                \"platform\": \"$platform\"
              }"
              results_array+=("$result")
              rm -f "$error_log_file"
              continue
            fi

            # 获取镜像大小
            image_size=$(docker inspect --format='{{.Size}}' "$clean_image" | numfmt --to=si)
            
            # 构建新的镜像名称
            new_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name_tag"
            
            # 重命名镜像
            if ! docker tag "$clean_image" "$new_image"; then
              result="{
                \"image\": \"$original_image\",
                \"status\": \"failed\",
                \"image_name\": \"$image_name\",
                \"tag\": \"$image_tag\",
                \"error\": \"Failed to tag image\",
                \"platform\": \"$platform\"
              }"
              results_array+=("$result")
              continue
            fi

            # 推送镜像
            push_error_log=$(mktemp)
            if docker push "$new_image" 2> "$push_error_log"; then
              result="{
                \"image\": \"$original_image\",
                \"status\": \"success\",
                \"image_name\": \"$image_name\",
                \"tag\": \"$image_tag\",
                \"size\": \"$image_size\",
                \"platform\": \"$platform\"
              }"
            else
              error_message=$(cat "$push_error_log" | tr -d '\n' | sed 's/"/\\"/g')
              result="{
                \"image\": \"$original_image\",
                \"status\": \"failed\",
                \"image_name\": \"$image_name\",
                \"tag\": \"$image_tag\",
                \"error\": \"$error_message\",
                \"platform\": \"$platform\"
              }"
            fi
            results_array+=("$result")
            rm -f "$push_error_log"
            
            # 清理本地镜像
            docker rmi "$clean_image" "$new_image" || true
          done < images.txt

          # 构建完整的JSON结果
          pull_summary_json="{"
          first=true
          for result in "${results_array[@]}"; do
            if [ "$first" = false ]; then
              pull_summary_json+=","
            fi
            # 提取镜像名称作为key
            image_key=$(echo "$result" | jq -r '.image' | sed 's/[\/:]/_/g')
            pull_summary_json+="\"$image_key\":$result"
            first=false
          done
          pull_summary_json+="}"
          
          # 打印结果摘要
          echo "=============================================="
          echo "pull-results-summary:"
          echo "=============================================="
          echo "$pull_summary_json"
          echo "=============================================="

          # 将结果写入文件
          echo "$pull_summary_json" > pull_results.json
          
          # 安装jq工具处理JSON
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
          
          # 格式化JSON输出
          formatted_json=$(echo "$pull_summary_json" | jq -c .)
          
          # 输出到GITHUB_OUTPUT
          echo "pull_summary_json<<EOF" >> $GITHUB_OUTPUT
          echo "$formatted_json" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 7. 上传pull结果
      - name: Upload-Pull-Results
        uses: actions/upload-artifact@v4
        with:
          name: pull-results
          path: pull_results.json
