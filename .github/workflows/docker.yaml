name: Docker Pull and Push (Webhook Trigger)

on:
  workflow_dispatch:
    inputs:
      images:
        description: 'Comma-separated list of Docker images (e.g., "nginx:latest,redis:alpine")'
        required: true
        type: string

env:
  ALIYUN_REGISTRY: "${{ secrets.ALIYUN_REGISTRY }}"
  ALIYUN_NAME_SPACE: "${{ secrets.ALIYUN_NAME_SPACE }}"
  ALIYUN_REGISTRY_USER: "${{ secrets.ALIYUN_REGISTRY_USER }}"
  ALIYUN_REGISTRY_PASSWORD: "${{ secrets.ALIYUN_REGISTRY_PASSWORD }}"

jobs:
  build:
    name: Pull and Push Images
    runs-on: ubuntu-latest
    steps:
      # 1. 清理磁盘空间（可选）
      - name: Free up disk space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: 'true'
          remove-haskell: 'true'

      - name: Restart Docker
        run: sudo service docker restart

      # 2. 检出代码
      - name: Checkout Code
        uses: actions/checkout@v4

      # 3. 处理传入的镜像列表
      - name: Process Images
        run: |
          echo "Received images: ${{ github.event.inputs.images }}"
          # 将逗号分隔的镜像列表写入 images.txt
          echo "${{ github.event.inputs.images }}" | sed 's/,/\n/g' > images.txt
          echo "Images to process:"
          cat images.txt

      # 4. 登录阿里云镜像仓库
      - name: Login to Aliyun
        run: |
          docker login -u $ALIYUN_REGISTRY_USER -p $ALIYUN_REGISTRY_PASSWORD $ALIYUN_REGISTRY

      # 5. 拉取、重命名并推送镜像
      - name: Pull, Tag, and Push Images
        run: |
          while IFS= read -r image || [ -n "$image" ]; do
            # 忽略空行
            [[ -z "$image" ]] && continue

            echo "Processing image: $image"
            
            # 拉取镜像
            docker pull "$image"

            # 提取镜像名和标签（如 nginx:latest -> nginx_latest）
            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}' | sed 's/:/_/g')
            
            # 目标镜像名称（阿里云格式）
            target_image="$ALIYUN_REGISTRY/$ALIYUN_NAME_SPACE/$image_name_tag"
            
            # 重命名镜像
            docker tag "$image" "$target_image"
            
            # 推送镜像
            docker push "$target_image"
            
            # 清理本地镜像
            docker rmi "$image" "$target_image"
          done < images.txt
